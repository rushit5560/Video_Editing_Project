def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 31

    packagingOptions {
//        pickFirst 'lib/armeabi-v7a/libswscale.so'
//        pickFirst 'lib/armeabi-v7a/libavdevice.so'
//        pickFirst 'lib/armeabi-v7a/libavutil.so'
//        pickFirst 'lib/armeabi-v7a/libswresample.so'
//
//        pickFirst 'lib/arm64-v8a/libswscale.so'
//        pickFirst 'lib/arm64-v8a/libavcodec.so'
//
//        pickFirst 'lib/x86/libswscale.so'
//        pickFirst 'lib/x86/libavcodec.so'
//        pickFirst 'lib/x86/libc++_shared.so'
//        pickFirst 'lib/x86/libavfilter.so'
//        pickFirst 'lib/x86/libswresample.so'
//
//        pickFirst 'lib/x86_64/libswscale.so'
//        pickFirst 'lib/x86_64/libavutil.so'
//        pickFirst 'lib/x86_64/libavcodec.so'
//        pickFirst 'lib/x86_64/libavformat.so'

       pickFirst '**/*.so'

    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.video_editing"
        minSdkVersion 24
        targetSdkVersion 31
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
            // minifyEnabled true
            ndk {
                abiFilters 'armeabi-v7a','arm64-v8a','x86_64'
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.12'
}